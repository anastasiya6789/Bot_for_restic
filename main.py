#—Å–¥–µ–ª–∞–π –æ—Ç–º–µ–Ω—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ª—É—á–∞–π–Ω–æ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
import asyncio
import sqlite3 as sql
import io
import datetime
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from config import TOKEN_API #–∏–∑ —Ñ–∞–π–ª–∞ config –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
from database import check_user_bd, get_reservation_data, get_users_with_access_0, delete_user,add_moderator, add_client,check_reservation_on_bd, check_client_bd, check_reservation_on_bd_2
from keyboards import entrance_ikb, moder_ikb, admin_ikb,reservation_ikb,default_kb, default_ikb
import pandas as pd
import os
entrance_username = ""  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ
entrance_password = ""
bot = Bot(token=TOKEN_API)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

async def on_startup(dp):
    print('ok')

async def send_birthday_greeting(dp):
    current_date = datetime.datetime.now().date()
   # print(current_date)
    target_date = current_date + datetime.timedelta(days=7)
   # print(target_date)

    con = sql.connect('Gaudi_bot.db')
    cur = con.cursor()
    target_date_str = target_date.strftime("%d.%m")
   # print(target_date_str)
    current_date_str = current_date.strftime("%d.%m")
   # print(current_date_str)

    query = f"SELECT userName, chatId, firstName, dateOfBirth FROM clients " \
            f"WHERE SUBSTR(dateOfBirth, 1, 5) = '{target_date_str}' " \
            f"OR SUBSTR(dateOfBirth, 1, 5) = '{current_date_str}'"

    cur.execute(query)
    result = cur.fetchall()
   # print(result)
    cur.close()
    con.close()

    for row in result:
        username = row[0]
        chat_id = row[1]
        first_name = row[2]
        date_of_birth = row[3]

        if chat_id is None:
            continue

        if date_of_birth[:5] == current_date_str:
            # –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è
            message_text = f"–î–æ—Ä–æ–≥–æ–π –≥–æ—Å—Ç—å, {first_name}! –ù–∞ —Å–≤—è–∑–∏ Gaud√≠ Bar ü¶é. " \
                           f"–û—Ç –≤—Å–µ–π –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–¥–∞–µ–º –í–∞–º —Ç—ë–ø–ª—ã–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! ü•≥ " \
                           f"–ñ–µ–ª–∞–µ–º –≤–∞–º –∫—Ä–µ–ø–∫–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è, —É–¥–∞—á–∏ –∏ —Å—á–∞—Å—Ç—å—è! " \
                           f"–°–µ–≥–æ–¥–Ω—è —É –Ω–∞—Å –í–∞—Å –∂–¥—ë—Ç –≤—Ç–æ—Ä–æ–π –∫–∞–ª—å—è–Ω üéÅ –∏ –¥–µ—Å–µ—Ä—Ç –≤ –ø–æ–¥–∞—Ä–æ–∫, –∞ —Ç–∞–∫–∂–µ —Ç—Ä–æ–π–Ω—ã–µ –±–æ–Ω—É—Å—ã."
            reply_markup = None
        else:
            message_text = f"–î–æ—Ä–æ–≥–æ–π –≥–æ—Å—Ç—å, {first_name}! –ù–∞ —Å–≤—è–∑–∏ Gaud√≠ Bar ü¶é. " \
                           f"–í –≤–∞—à –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è ü•≥ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –∫–∞–ª—å—è–Ω–∞ –¥–ª—è –≤–∞—Å –≤ –ø–æ–¥–∞—Ä–æ–∫ –≤—Ç–æ—Ä–æ–π –∫–∞–ª—å—è–Ω üéÅ " \
                           f"–∏ –¥–µ—Å–µ—Ä—Ç –¥–ª—è –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞! " \
                           f"–ê —Ç–∞–∫–∂–µ –≤ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è, –∑–∞ —Ç—Ä–∏ –¥–Ω—è –¥–æ –Ω–µ–≥–æ –∏ —Ç—Ä–∏ –¥–Ω—è –ø–æ—Å–ª–µ –Ω–µ–≥–æ " \
                           f"–ø—Ä–∏ –≤–∏–∑–∏—Ç–µ –∫ –Ω–∞–º –Ω–∞—á–∏—Å–ª–∏–º –≤–∞–º —Ç—Ä–æ–π–Ω—ã–µ –±–æ–Ω—É—Å—ã! " \
                           f"–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ –¥–ª—è –≤–∞—Å?"
            reply_markup = reservation_ikb

        await dp.bot.send_message(chat_id=chat_id, text=message_text, reply_markup=reply_markup)

async def schedule_birthday_greetings(dp):
    while True:
        await send_birthday_greeting(dp)
        # Pause for one day (24 hours)
        await asyncio.sleep(24 * 60 * 60)

class EntranceStates(StatesGroup): # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Ö–æ–¥–∞
    WAITING_FOR_USERNAME = State()
    WAITING_FOR_PASSWORD = State()

class AddModerStates(StatesGroup): # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Ö–æ–¥–∞
    WAITING_FOR_MODER_USERNAME = State()
    WAITING_FOR_MODER_PASSWORD = State()

class DeleteStates(StatesGroup):
    WAITING_FOR_DELETE_USERNAME=State()

class AddClientStates(StatesGroup):
    WAITING_FOR_CLIENT_NAME=State()
    WAITING_FOR_CLIENT_DOB = State()
    WAITING_FOR_CLIENT_USERNAME = State()
    WAITING_FOR_CLIENT_PHONE_NUMBER = State()

class AddReservationStates(StatesGroup):
    WAITING_FOR_INFO=State()
    WAITING_FOR_INFO_NEW=State()


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.answer(text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç", reply_markup=default_kb)
    await message.delete()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    chat_id = message.chat.id

    # –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    request = types.KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(request)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–æ –∫–Ω–æ–ø–∫–µ –≤ –º–µ–Ω—é", reply_markup=keyboard)

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def handle_contact(message: types.Message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    phone_number = message.contact.phone_number

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ "clients"
    con = sql.connect('Gaudi_bot.db')
    cur = con.cursor()
    query = f"SELECT userName FROM clients WHERE phone_number = '{phone_number}'"
    cur.execute(query)
    result = cur.fetchone()

    if result:
        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ "clients", –¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        telegram_username = message.from_user.username
        chat_id = message.chat.id
        update_query = f"UPDATE clients SET userName = '{telegram_username}', chatId = {chat_id} WHERE phone_number = '{phone_number}'"
        cur.execute(update_query)
        con.commit()

        await message.answer("–õ–æ–≥–∏–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=default_kb)
    else:
        # –ï—Å–ª–∏ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        chat_id = message.chat.id
        telegram_username = message.from_user.username
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è chat_id –≤ —Ç–∞–±–ª–∏—Ü–µ clients_default
        check_query = f"SELECT chatId FROM clients_default WHERE chatId = {chat_id}"
        cur.execute(check_query)
        result = cur.fetchone()
        # print(result)

        if result:
            # –ï—Å–ª–∏ chat_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ clients_default, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            await message.answer("–í–∞—à –ª–æ–≥–∏–Ω, —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=default_kb)
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ clients_default
            insert_query = f"INSERT INTO clients_default (userName, chatId, phone_number) VALUES ('{telegram_username}', {chat_id}, '{phone_number}')"
            cur.execute(insert_query)
            con.commit()
            await message.answer("–õ–æ–≥–∏–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=default_kb)

    con.close()

@dp.message_handler(commands=['menu'])
async def moder_command(message:types.Message):
    await message.answer(text="–í –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ: ", reply_markup=default_ikb)
    await message.delete()


@dp.message_handler(commands=['moder'])
async def moder_command(message:types.Message):
    await message.answer(text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—Ö–æ–¥", reply_markup=entrance_ikb)
    await message.delete()

@dp.callback_query_handler()
async def callback_authentication(callback: types.CallbackQuery, state: FSMContext):
    if callback.data=='entrance':  # –∫–æ–ª–±–µ–∫ –¥–ª—è –≤—Ö–æ–¥–∞
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω')
        await EntranceStates.WAITING_FOR_USERNAME.set()
    elif callback.data=='opening_hours':
        current_file_path = os.path.abspath(__file__)
        project_directory = os.path.dirname(current_file_path)
        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ PDF —Ñ–∞–π–ª—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
        image_path = os.path.join(project_directory, 'opening_hours.png')
        chat_id = callback.message.chat.id  # –ü–æ–ª—É—á–µ–Ω–∏–µ chat_id –∏–∑ callback
        with open(image_path, 'rb') as photo:
            await bot.send_photo(chat_id=chat_id, photo=photo)

    elif callback.data=='websity':
        await callback.message.answer(' –ù–∞—à —Å–∞–π—Ç: https://gaudibar.ru/')
    elif callback.data=='info_promotion':
        await callback.message.answer('–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –¥–ª—è –≤–∞—Å')
        current_file_path = os.path.abspath(__file__)
        project_directory = os.path.dirname(current_file_path)
        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ PDF —Ñ–∞–π–ª—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
        pdf_file_path = os.path.join(project_directory, '2.pdf')
        chat_id = callback.message.chat.id  # –ü–æ–ª—É—á–µ–Ω–∏–µ chat_id –∏–∑ callback
        with open(pdf_file_path, 'rb') as f:
            await bot.send_document(chat_id=chat_id, document=f)
    elif callback.data=='number_phone':
        await callback.message.answer(' –í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –ø–æ –Ω–æ–º–µ—Ä—É: +7 343 201 11 17')
    elif callback.data == 'menu_pdf':
        await callback.message.answer('–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å –º–µ–Ω—é –¥–ª—è –≤–∞—Å')
        current_file_path = os.path.abspath(__file__)
        project_directory = os.path.dirname(current_file_path)
        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ PDF —Ñ–∞–π–ª—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
        pdf_file_path = os.path.join(project_directory, '1.pdf')
        chat_id = callback.message.chat.id  # –ü–æ–ª—É—á–µ–Ω–∏–µ chat_id –∏–∑ callback
        with open(pdf_file_path, 'rb') as f:
            await bot.send_document(chat_id=chat_id, document=f)

    elif callback.data == 'reservation':
        await callback.message.answer('–°–ø–∏—Å–æ–∫ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–∏–∫–æ–≤')
        # –ü–æ–ª—É—á–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite –∏ —Å–æ–∑–¥–∞–π—Ç–µ DataFrame
        table_data = get_reservation_data()  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        df = pd.DataFrame(table_data)
        # –°–æ–∑–¥–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç BytesIO –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
        excel_data = io.BytesIO()
        # –ó–∞–ø–∏—à–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ DataFrame –≤ BytesIO –æ–±—ä–µ–∫—Ç
        with pd.ExcelWriter(excel_data, engine='xlsxwriter') as writer:
            df.to_excel(writer, index=False)
        # –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç–µ–ª—å BytesIO –≤ –Ω–∞—á–∞–ª–æ
        excel_data.seek(0)
        # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–∞–±–ª–∏—á–∫—É —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ send_document
        excel_data.name = 'reservation_table.xlsx'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ BytesIO
        await bot.send_document(callback.from_user.id, excel_data)

    elif callback.data == 'deleteModer':
        await callback.message.answer('–°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤')
        user_logins = get_users_with_access_0()
        users_text = '\n'.join(user_logins)
        await callback.message.answer(f'–õ–æ–≥–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π :\n{users_text}')
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å')
        await DeleteStates.WAITING_FOR_DELETE_USERNAME.set()

    elif callback.data == 'addModer':
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞')
        await AddModerStates.WAITING_FOR_MODER_USERNAME.set()

    elif callback.data == 'addClient':
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)')
        await AddClientStates.WAITING_FOR_CLIENT_NAME.set()
    elif callback.data == 'addReservation':
        chat_id = callback.message.chat.id
        if check_client_bd(chat_id):
            await callback.message.answer(" \n ü¶é –ü–µ—Ä–µ–¥ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ä–µ–∂–∏–º–æ–º —Ä–∞–±–æ—Ç—ã. –°—Ç–æ–ª –∑–∞–∫—Ä–µ–ø–ª—è–µ—Ç—Å—è –∑–∞ –≤–∞–º–∏ –Ω–∞ 3 —á–∞—Å–∞. \n ü¶é –ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. \nü¶é –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –±–æ–ª—å—à–µ 8, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ 2 —Å—Ç–æ–ª–∞. \nü¶é –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. \nü¶é –ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ <b>¬´–æ—Ç–º–µ–Ω–∞¬ª</b> ,–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ. \nü¶é –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä –Ω–∏–∂–µ, –∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.", parse_mode='HTML')
            await callback.message.answer(" <b>–î–∞—Ç–∞:</b> 1970.20.02 \n<b>–í—Ä–µ–º—è:</b> 16:00 \n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:</b> 6 ", parse_mode='HTML')
            await AddReservationStates.WAITING_FOR_INFO.set()
        else:
            await callback.message.answer("\n ü¶é –ü–µ—Ä–µ–¥ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ä–µ–∂–∏–º–æ–º —Ä–∞–±–æ—Ç—ã. –°—Ç–æ–ª –∑–∞–∫—Ä–µ–ø–ª—è–µ—Ç—Å—è –∑–∞ –≤–∞–º–∏ –Ω–∞ 3 —á–∞—Å–∞.\n ü¶é –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –∏–º—è, –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. \nü¶é –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –±–æ–ª—å—à–µ 8, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ 2 —Å—Ç–æ–ª–∞. \nü¶é –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. \nü¶é –ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ <b>¬´–æ—Ç–º–µ–Ω–∞¬ª</b> ,–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ. \nü¶é –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä –Ω–∏–∂–µ, –∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.", parse_mode='HTML')
            await callback.message.answer(
                "<b>–ò–º—è:</b> –ê–Ω–∞—Å—Ç–∞—Å–∏—è \n<b>–î–∞—Ç–∞:</b> 1970.20.02 \n<b>–í—Ä–µ–º—è:</b> 16:00 \n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:</b> 6 ",parse_mode='HTML')
            await AddReservationStates.WAITING_FOR_INFO_NEW.set()


@dp.message_handler(state=AddReservationStates.WAITING_FOR_INFO)
async def info_reservation(message: types.Message, state: FSMContext):
    info = message.text.lower()
    if info == "–æ—Ç–º–µ–Ω–∞":
        # If the user input is "–æ—Ç–º–µ–Ω–∞", finish the state
        await state.finish()
        await message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    try:
        chat_id = message.chat.id
        telegram_username = message.from_user.username
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã
        date_start = info.find("–¥–∞—Ç–∞: ") + len("–¥–∞—Ç–∞: ")
        date_end = info.find("\n", date_start)
        date = info[date_start:date_end].strip()  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        time_start = info.find("–≤—Ä–µ–º—è: ") + len("–≤—Ä–µ–º—è: ")
        time_end = info.find("\n", time_start)
        time = info[time_start:time_end].strip()  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ—Å—Ç–µ–π
        guests_start = info.find("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: ") + len("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: ")
        guests = int(info[guests_start:].strip())  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ


        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if not (date and time and guests):
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")

        if check_reservation_on_bd(date,time,guests, chat_id, telegram_username):
            await message.answer(text="–°—Ç–æ–ª –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω")
            await message.answer(
                f'–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ :\n–î–∞—Ç–∞: {date} \n–í—Ä–µ–º—è: {time} \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: {guests} ')
        else:
            await message.answer(text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ—Ç –º–µ—Å—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å")

        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è FSMContext
        await state.finish()

    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞
       # print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥:", e)
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")

@dp.message_handler(state=AddReservationStates.WAITING_FOR_INFO_NEW)
async def infooh_reservation(message: types.Message, state: FSMContext):
    info = message.text.lower()
    if info == "–æ—Ç–º–µ–Ω–∞":
        # If the user input is "–æ—Ç–º–µ–Ω–∞", finish the state
        await state.finish()
        await message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    try:
        chat_id = message.chat.id
        telegram_username = message.from_user.username

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏
        name_start = info.find("–∏–º—è: ") + len("–∏–º—è: ")
        name_end = info.find("\n", name_start)
        name = info[name_start:name_end].strip()  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã
        date_start = info.find("–¥–∞—Ç–∞: ") + len("–¥–∞—Ç–∞: ")
        date_end = info.find("\n", date_start)
        date = info[date_start:date_end].strip()  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        time_start = info.find("–≤—Ä–µ–º—è: ") + len("–≤—Ä–µ–º—è: ")
        time_end = info.find("\n", time_start)
        time = info[time_start:time_end].strip()  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ—Å—Ç–µ–π
        guests_start = info.find("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: ") + len("–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: ")
        guests = int(info[guests_start:].strip())  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if not (name and date and time and guests):
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")

        if check_reservation_on_bd_2(name, date, time, guests, chat_id, telegram_username):
            await message.answer(text="–°—Ç–æ–ª –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω")
            await message.answer(
                f'–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ :\n–î–∞—Ç–∞: {date} \n–í—Ä–µ–º—è: {time} \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: {guests} ')
        else:
            await message.answer(text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ—Ç –º–µ—Å—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å")

        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è FSMContexts
        await state.finish()

    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        #print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥:", e)
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")


@dp.message_handler(state=AddClientStates.WAITING_FOR_CLIENT_NAME)
async def entrance_client_name(message: types.Message, state: FSMContext):
    entrance_client_name = message.text.split()
    await state.update_data(client_name=entrance_client_name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì).')
    await AddClientStates.WAITING_FOR_CLIENT_DOB.set()

@dp.message_handler(state=AddClientStates.WAITING_FOR_CLIENT_DOB)
async def entrance_dob(message: types.Message, state: FSMContext):
    entrance_dob = message.text
    await state.update_data(client_dob=entrance_dob)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∫–ª–∏–µ–Ω—Ç–∞ –≤ Telegram')
    await AddClientStates.WAITING_FOR_CLIENT_USERNAME.set()

@dp.message_handler(state=AddClientStates.WAITING_FOR_CLIENT_USERNAME)
async def entrance_client_username(message: types.Message, state: FSMContext):
    entrance_client_username = message.text
    data = await state.get_data()
    client_name = data['client_name']
    client_dob = data['client_dob']
    await state.update_data(client_username=entrance_client_username)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞')
    await AddClientStates.WAITING_FOR_CLIENT_PHONE_NUMBER.set()

@dp.message_handler(state=AddClientStates.WAITING_FOR_CLIENT_PHONE_NUMBER)
async def entrance_client_phone_number(message: types.Message, state: FSMContext):
    entrance_client_phone_number = message.text
    data = await state.get_data()
    client_name = data['client_name']
    client_dob = data['client_dob']
    client_username = data['client_username']
    add_client(client_name, client_dob, client_username, entrance_client_phone_number)

    await message.answer('–ö–ª–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω')

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è FSMContext
    await state.finish()

@dp.message_handler(state=AddModerStates.WAITING_FOR_MODER_USERNAME)
async def entrance_moder_username(message: types.Message, state: FSMContext):
    entrance_moder_username = message.text
    await state.update_data(moder_username=entrance_moder_username)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞')
    await AddModerStates.WAITING_FOR_MODER_PASSWORD.set()


@dp.message_handler(state=AddModerStates.WAITING_FOR_MODER_PASSWORD)
async def entrance_moder_password(message: types.Message, state: FSMContext):
    entrance_moder_password = message.text
    await state.update_data(moder_password=entrance_moder_password)
    data = await state.get_data()
    moder_username = data['moder_username']
    moder_password = data['moder_password']
    add_moderator(moder_username, moder_password)
    await message.answer(f'–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {moder_username} –¥–æ–±–∞–≤–ª–µ–Ω')
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è FSMContext
    await state.finish()


@dp.message_handler(state=DeleteStates.WAITING_FOR_DELETE_USERNAME)
async def delete_username(message: types.Message, state: FSMContext):
    delete_username = message.text
    delete_user(delete_username)
    await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {delete_username} —É–¥–∞–ª–µ–Ω')
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è FSMContext
    await state.finish()
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–∏–Ω–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ
@dp.message_handler(state=EntranceStates.WAITING_FOR_USERNAME)
async def entrance_username(message: types.Message):
    global entrance_username
    entrance_username = message.text
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')
    await EntranceStates.WAITING_FOR_PASSWORD.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞—Ä–æ–ª—è –ø—Ä–∏ –≤—Ö–æ–¥–µ
@dp.message_handler(state=EntranceStates.WAITING_FOR_PASSWORD)
async def entrance_password(message: types.Message, state: FSMContext):
    global entrance_password
    entrance_password = message.text
    access_level = check_user_bd(entrance_username, entrance_password)

    if access_level == "kbsuper":
        await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {entrance_username}!", reply_markup=admin_ikb)
    elif access_level == "kb":
        await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {entrance_username}!", reply_markup=moder_ikb)
    else:
        await message.answer("–¢–∞–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    await state.finish()

if __name__ == '__main__':
    # executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
    loop = asyncio.get_event_loop()
    loop.create_task(schedule_birthday_greetings(dp))
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)